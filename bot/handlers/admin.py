import re
import logging
import asyncio
from aiogram import F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import InputMediaPhoto, InputMediaVideo, InputMediaDocument, InputMediaAudio

from bot.database.db import log_action, get_statistics, get_all_users
from bot.config.config import is_admin
from bot.utils.keyboards import get_back_keyboard, get_broadcast_confirmation_keyboard, get_cancel_broadcast_keyboard

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class BroadcastStates(StatesGroup):
    waiting_for_content = State()
    waiting_for_confirmation = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
async def process_statistics_button(callback: CallbackQuery):
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not is_admin(user_id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        return
    
    stats = get_statistics()
    
    stats_text = (
        "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞** üìä\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
        f"üë§ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 7 –¥–Ω–µ–π: {stats['active_users']}\n"
        f"üöÄ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π /start: {stats['start_count']}\n"
        f"üéÅ –ù–∞–∂–∞—Ç–∏–π –Ω–∞ '–í—ã–±—Ä–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫': {stats['guide_clicks']}\n"
        f"üì® –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å—Å—ã–ª–æ–∫: {stats['broadcast_count']}\n"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard = get_back_keyboard()
    
    await callback.message.edit_text(stats_text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /broadcast –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
async def cmd_broadcast(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if not is_admin(user_id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
        
    await state.set_state(BroadcastStates.waiting_for_content)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
async def handle_broadcast_button(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    if not is_admin(user_id):
        await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    await state.set_state(BroadcastStates.waiting_for_content)
    log_action("broadcast_init", user_id)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
    keyboard = get_cancel_broadcast_keyboard()
    
    await callback.message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ:\n"
        "- –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Markdown)\n"
        "- –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–¥–∏–∞ (—Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ) —Å –ø–æ–¥–ø–∏—Å—å—é\n"
        "- –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ–¥–∏–∞ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ (–º–µ–¥–∏–∞-–≥—Ä—É–ø–ø–∞)\n"
        "- –ü–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –¥—Ä—É–≥–æ–≥–æ —á–∞—Ç–∞\n\n"
        "–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞, –≤–∞–º –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É.\n"
        "–î–ª—è –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /confirm_media_group –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ—Ö –º–µ–¥–∏–∞.",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —Ä–∞—Å—Å—ã–ª–∫–∏
async def cancel_broadcast(callback: CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    if current_state is not None:
        await state.clear()
    await callback.message.edit_text("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await callback.answer()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
def create_text_preview(text, is_command=False):
    # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ /confirm_media_group, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if is_command and text.strip().startswith('/confirm_media_group'):
        return "–ö–æ–º–∞–Ω–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã. –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã."
    return text

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ (—Ç–µ–∫—Å—Ç)
async def process_broadcast_text(message: Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    original_text = message.text
    cleaned_text = original_text.rstrip('/')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–æ–π /confirm_media_group
    is_confirm_command = original_text.strip().startswith('/confirm_media_group')
    
    # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ /confirm_media_group, –Ω–µ –º–µ–Ω—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
    # –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–∏–ø media_group, –µ—Å–ª–∏ –æ–Ω –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–∞–Ω–µ–µ
    if is_confirm_command:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –∏ entities, –Ω–µ —Ç—Ä–æ–≥–∞—è message_type
        await state.update_data(message_text=cleaned_text, entities=message.entities)
    else:
        # –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ text
        await state.update_data(message_text=cleaned_text, entities=message.entities, message_type="text")
    
    await state.set_state(BroadcastStates.waiting_for_confirmation)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = get_broadcast_confirmation_keyboard()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    preview_text = create_text_preview(original_text, is_confirm_command)
    
    await message.answer(
        f"–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n{preview_text}\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É:",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞ –≤ –≥—Ä—É–ø–ø–µ
async def _process_media_in_group(message: Message, state: FSMContext, media_type: str, media_id: str):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    media_group = data.get('media_group', [])
    media_group_id = data.get('media_group_id')
    
    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤–∞—è –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø–∞ –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π
    if not media_group_id or media_group_id != message.media_group_id:
        media_group = []
        media_group_id = message.media_group_id
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞ –≤ –≥—Ä—É–ø–ø—É
    caption = message.caption or ""
    media_group.append({
        'type': media_type,
        'media': media_id,
        'caption': caption if not data.get('caption') else "",
        'caption_entities': message.caption_entities if not data.get('caption_entities') else None
    })
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É
    await state.update_data(
        media_group=media_group,
        media_group_id=media_group_id,
        caption=caption or data.get('caption', ""),
        caption_entities=message.caption_entities or data.get('caption_entities'),
        message_type="media_group"
    )
    
    # –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.answer(f"–ú–µ–¥–∏–∞ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É. –í—Å–µ–≥–æ –º–µ–¥–∏–∞ –≤ –≥—Ä—É–ø–ø–µ: {len(media_group)}. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Å–µ –º–µ–¥–∏–∞, –∑–∞—Ç–µ–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ (—Ñ–æ—Ç–æ)
async def process_broadcast_photo(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —á–∞—Å—Ç—å—é –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã
    if message.media_group_id:
        photo_id = message.photo[-1].file_id
        await _process_media_in_group(message, state, 'photo', photo_id)
    else:
        # –û–±—ã—á–Ω–æ–µ –æ–¥–∏–Ω–æ—á–Ω–æ–µ —Ñ–æ—Ç–æ
        photo_id = message.photo[-1].file_id
        caption = message.caption or ""
        
        await state.update_data(
            photo_id=photo_id, 
            caption=caption, 
            caption_entities=message.caption_entities,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º entities –ø–æ–¥–ø–∏—Å–∏
            message_type="photo"
        )
        await state.set_state(BroadcastStates.waiting_for_confirmation)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        keyboard = get_broadcast_confirmation_keyboard()
        
        await message.answer(
            "–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (–≤—ã—à–µ) —Å –ø–æ–¥–ø–∏—Å—å—é:\n\n"
            f"{caption}\n\n"
            "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É:",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ (–≤–∏–¥–µ–æ)
async def process_broadcast_video(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —á–∞—Å—Ç—å—é –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã
    if message.media_group_id:
        video_id = message.video.file_id
        await _process_media_in_group(message, state, 'video', video_id)
    else:
        # –û–±—ã—á–Ω–æ–µ –æ–¥–∏–Ω–æ—á–Ω–æ–µ –≤–∏–¥–µ–æ
        video_id = message.video.file_id
        caption = message.caption or ""
        
        await state.update_data(
            video_id=video_id, 
            caption=caption, 
            caption_entities=message.caption_entities,
            message_type="video"
        )
        await state.set_state(BroadcastStates.waiting_for_confirmation)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        keyboard = get_broadcast_confirmation_keyboard()
        
        await message.answer(
            "–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –≤–∏–¥–µ–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (–≤—ã—à–µ) —Å –ø–æ–¥–ø–∏—Å—å—é:\n\n"
            f"{caption}\n\n"
            "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É:",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ (–ø–µ—Ä–µ—Å—ã–ª–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
async def process_broadcast_forwarded(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–º
    if message.forward_from or message.forward_from_chat:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        await state.update_data(
            from_chat_id=message.forward_from_chat.id if message.forward_from_chat else message.forward_from.id,
            message_id=message.message_id,
            message_type="forwarded"
        )
        await state.set_state(BroadcastStates.waiting_for_confirmation)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        keyboard = get_broadcast_confirmation_keyboard()
        
        await message.answer(
            "–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (–≤—ã—à–µ).\n\n"
            "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É:",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /confirm_media_group –∏–∑ —Ç–µ–∫—Å—Ç–∞
def clean_confirm_media_group_command(text):
    if not text:
        return ""
    # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤ –ª—é–±–æ–º –º–µ—Å—Ç–µ —Ç–µ–∫—Å—Ç–∞
    cleaned_text = re.sub(r'/confirm_media_group\b', '', text).strip()
    return cleaned_text

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã
def create_media_group_preview(media_group, caption):
    # –û—á–∏—â–∞–µ–º –ø–æ–¥–ø–∏—Å—å –æ—Ç –∫–æ–º–∞–Ω–¥—ã
    if caption:
        caption = clean_confirm_media_group_command(caption)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã
    preview_text = f"–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n"
    preview_text += f"üì∑ –ú–µ–¥–∏–∞-–≥—Ä—É–ø–ø–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç {len(media_group)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤.\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–∞—Ö –º–µ–¥–∏–∞ –≤ –≥—Ä—É–ø–ø–µ
    media_types = {}
    for item in media_group:
        media_type = item['type']
        media_types[media_type] = media_types.get(media_type, 0) + 1
    
    for media_type, count in media_types.items():
        if media_type == 'photo':
            preview_text += f"üñº –§–æ—Ç–æ: {count}\n"
        elif media_type == 'video':
            preview_text += f"üé¨ –í–∏–¥–µ–æ: {count}\n"
        elif media_type == 'document':
            preview_text += f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã: {count}\n"
        elif media_type == 'audio':
            preview_text += f"üéµ –ê—É–¥–∏–æ: {count}\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∏ –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã
    captions = []
    for item in media_group:
        item_caption = item.get('caption', '')
        if item_caption:
            item_caption = clean_confirm_media_group_command(item_caption)
            if item_caption and item_caption not in captions:
                captions.append(item_caption)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é –ø–æ–¥–ø–∏—Å—å, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    if caption and caption not in captions:
        preview_text += f"\nüìù –û–±—â–∞—è –ø–æ–¥–ø–∏—Å—å: {caption}\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∏ –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –æ—Ç –æ–±—â–µ–π
    if captions:
        for i, item_caption in enumerate(captions):
            if item_caption != caption:
                preview_text += f"\nüìù –ü–æ–¥–ø–∏—Å—å {i+1}: {item_caption}\n"
    
    return preview_text

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã
async def confirm_media_group(message: Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    media_group = data.get('media_group', [])
    
    if not media_group:
        await message.answer("–ú–µ–¥–∏–∞-–≥—Ä—É–ø–ø–∞ –ø—É—Å—Ç–∞. –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ–¥–∏–∞-—Ñ–∞–π–ª—ã.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    command_text = message.text if message.text else ""
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ media_group –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã
    # –í–∞–∂–Ω–æ: —Å–æ—Ö—Ä–∞–Ω—è–µ–º message_type –∫–∞–∫ media_group
    await state.update_data(
        message_type="media_group", 
        message_text=command_text,
        entities=message.entities
    )
    await state.set_state(BroadcastStates.waiting_for_confirmation)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = get_broadcast_confirmation_keyboard()
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—å
    caption = data.get('caption', '')
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã
    preview_text = create_media_group_preview(media_group, caption)
    preview_text += "\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É:"
    
    await message.answer(
        preview_text,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
async def send_text_message(bot: Bot, recipient_id: int, broadcast_data: dict):
    logger.debug(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {recipient_id}")
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥–æ–π /confirm_media_group
    message_text = broadcast_data.get("message_text", "")
    if message_text and message_text.strip().startswith('/confirm_media_group'):
        # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –∏–∑ —Ç–µ–∫—Å—Ç–∞
        message_text = clean_confirm_media_group_command(message_text)
        logger.debug(f"–¢–µ–∫—Å—Ç –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: '{message_text}'")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –ø—É—Å—Ç–æ–π –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
    if message_text:
        await bot.send_message(
            chat_id=recipient_id,
            text=message_text,
            entities=broadcast_data.get('entities'),
            disable_web_page_preview=True
        )
        logger.debug(f"–¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {recipient_id}")
        return True
    else:
        logger.debug(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –ø—É—Å—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {recipient_id}")
        return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ
async def send_photo_message(bot: Bot, recipient_id: int, broadcast_data: dict):
    logger.debug(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {recipient_id}")
    await bot.send_photo(
        chat_id=recipient_id,
        photo=broadcast_data["photo_id"],
        caption=broadcast_data.get("caption", ""),
        caption_entities=broadcast_data.get('caption_entities')
    )
    logger.debug(f"–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {recipient_id}")
    return True

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ
async def send_video_message(bot: Bot, recipient_id: int, broadcast_data: dict):
    logger.debug(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {recipient_id}")
    await bot.send_video(
        chat_id=recipient_id,
        video=broadcast_data["video_id"],
        caption=broadcast_data.get("caption", ""),
        caption_entities=broadcast_data.get('caption_entities')
    )
    logger.debug(f"–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {recipient_id}")
    return True

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏
async def perform_broadcast(bot: Bot, user_ids: list, broadcast_data: dict, message_type: str = None) -> tuple:
    # –ï—Å–ª–∏ message_type –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –±–µ—Ä–µ–º –µ–≥–æ –∏–∑ broadcast_data
    if message_type is None:
        message_type = broadcast_data.get('message_type', 'text')
    
    logger.debug(f"–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {len(user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: {message_type}")
    successful = 0
    failed = 0
    
    # –î–ª—è –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
    if message_type == 'media_group':
        try:
            media_group = broadcast_data.get('media_group', [])
            if not media_group:
                logger.warning("–ü—É—Å—Ç–∞—è –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
                return 0, len(user_ids)
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            input_media = []
            for item in media_group:
                if item['type'] == 'photo':
                    media = InputMediaPhoto(media=item['media'])
                elif item['type'] == 'video':
                    media = InputMediaVideo(media=item['media'])
                elif item['type'] == 'document':
                    media = InputMediaDocument(media=item['media'])
                elif item['type'] == 'audio':
                    media = InputMediaAudio(media=item['media'])
                else:
                    continue
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å —Ç–æ–ª—å–∫–æ –∫ –ø–µ—Ä–≤–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É
                if len(input_media) == 0 and broadcast_data.get('caption'):
                    media.caption = broadcast_data.get('caption')
                    media.caption_entities = broadcast_data.get('caption_entities')
                
                input_media.append(media)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            tasks = []
            for user_id in user_ids:
                tasks.append(bot.send_media_group(chat_id=user_id, media=input_media))
            
            results = await asyncio.gather(*tasks, return_exceptions=True)
            successful = sum(1 for res in results if not isinstance(res, Exception))
            failed = len(results) - successful
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã: {e}")
            return 0, len(user_ids)
    else:
        # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
        for user_id in user_ids:
            try:
                # –í—ã–±–∏—Ä–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
                if message_type == "text":
                    result = await send_text_message(bot, user_id, broadcast_data)
                elif message_type == "photo":
                    result = await send_photo_message(bot, user_id, broadcast_data)
                elif message_type == "video":
                    result = await send_video_message(bot, user_id, broadcast_data)
                elif message_type == "media_group":
                    result = await send_media_group_message(bot, user_id, broadcast_data)
                elif message_type == "forwarded":
                    # –î–ª—è –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                    result = await bot.forward_message(
                        chat_id=user_id,
                        from_chat_id=broadcast_data["from_chat_id"],
                        message_id=broadcast_data["message_id"]
                    )
                    result = True if result else False
                else:
                    logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: {message_type}")
                    result = False
                
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ —É—Å–ø–µ—à–Ω—ã—Ö/–Ω–µ—É—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫
                if result:
                    successful += 1
                else:
                    failed += 1
                    
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π API
                await asyncio.sleep(0.05)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                failed += 1
    
    logger.debug(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: {successful}, —Å –æ—à–∏–±–∫–∞–º–∏: {failed}")
    return successful, failed

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏
async def confirm_broadcast_handler(callback: CallbackQuery, state: FSMContext, bot: Bot):
    user_id = callback.from_user.id
    logger.debug(f"–í—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è confirm_broadcast –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    broadcast_data = await state.get_data()
    message_type = broadcast_data.get("message_type")
    logger.debug(f"–¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: {message_type}")
    logger.debug(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: {broadcast_data}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    user_ids = get_all_users()
    logger.debug(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: {len(user_ids)}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å media_group –≤ –¥–∞–Ω–Ω—ã—Ö, —Ç–æ –≤—Å–µ–≥–¥–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ media_group
    # –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è message_type
    if broadcast_data.get('media_group'):
        message_type = 'media_group'
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ç–∏–ø–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        await state.update_data(message_type='media_group')
        broadcast_data['message_type'] = 'media_group'
        logger.debug(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: {message_type}")
    
    successful, failed = await perform_broadcast(bot, user_ids, broadcast_data, message_type)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    log_action("broadcast", user_id)
    logger.debug(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: {successful}, —Å –æ—à–∏–±–∫–∞–º–∏: {failed}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –æ —Ä–∞—Å—Å—ã–ª–∫–µ
    try:
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
        logger.debug("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö —Ä–∞—Å—Å—ã–ª–∫–∏")
        await callback.message.edit_text(
            f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n\n"
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {successful}\n"
            f"‚ùå –û—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {failed}\n")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
        logger.debug(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {str(e)}")
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã –æ–¥–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async def send_media_group_to_user(bot: Bot, recipient_id: int, broadcast_data: dict):
    message_type = broadcast_data.get('message_type')
    
    if message_type == 'media_group':
        return await send_media_group_message(bot, recipient_id, broadcast_data)
    elif message_type == 'text':
        text = clean_confirm_media_group_command(broadcast_data.get('caption', ''))
        if text:
            await bot.send_message(chat_id=recipient_id, text=text, entities=broadcast_data.get('caption_entities'))
            return True
        return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã
async def send_media_group_message(bot: Bot, recipient_id: int, broadcast_data: dict):
    logger.debug(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {recipient_id}")
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É –º–µ–¥–∏–∞
    media_group = broadcast_data.get('media_group', [])
    logger.debug(f"–ú–µ–¥–∏–∞-–≥—Ä—É–ø–ø–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç {len(media_group)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
    
    if not media_group:
        logger.warning(f"–ü—É—Å—Ç–∞—è –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {recipient_id}")
        return False
    
    input_media = []
    has_caption_added = False
    caption = broadcast_data.get('caption', '')
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –º–µ–¥–∏–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    for item in media_group:
        if item['type'] == 'photo':
            media = InputMediaPhoto(media=item['media'])
        elif item['type'] == 'video':
            media = InputMediaVideo(media=item['media'])
        elif item['type'] == 'document':
            media = InputMediaDocument(media=item['media'])
        elif item['type'] == 'audio':
            media = InputMediaAudio(media=item['media'])
        else:
            continue
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å —Ç–æ–ª—å–∫–æ –∫ –ø–µ—Ä–≤–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É
        if not has_caption_added and caption:
            media.caption = caption
            media.caption_entities = broadcast_data.get('caption_entities')
            has_caption_added = True
        
        input_media.append(media)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É
    try:
        await bot.send_media_group(chat_id=recipient_id, media=input_media)
        logger.debug(f"–ú–µ–¥–∏–∞-–≥—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {recipient_id}")
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å—å, –Ω–æ –æ–Ω–∞ –Ω–µ –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫ –º–µ–¥–∏–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        if caption and not has_caption_added:
            logger.debug(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥–ø–∏—Å—å—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {recipient_id}")
            await bot.send_message(
                chat_id=recipient_id,
                text=caption,
                entities=broadcast_data.get('caption_entities')
            )
            logger.debug(f"–¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥–ø–∏—Å—å—é —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {recipient_id}")
        
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {recipient_id}: {e}")
        return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
async def send_forwarded_message(bot: Bot, recipient_id: int, broadcast_data: dict):
    logger.debug(f"–ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {recipient_id}")
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º copy_message –≤–º–µ—Å—Ç–æ forward_message –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await bot.copy_message(
        chat_id=recipient_id,
        from_chat_id=broadcast_data["from_chat_id"],
        message_id=broadcast_data["message_id"]
    )
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
    result = await perform_broadcast(bot, user_ids, broadcast_data)
    if isinstance(result, tuple) and len(result) == 2:
        successful, failed = result
    else:
        successful = 0
        failed = len(user_ids)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    log_action("broadcast", user_id)
    logger.debug(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: {successful}, —Å –æ—à–∏–±–∫–∞–º–∏: {failed}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –æ —Ä–∞—Å—Å—ã–ª–∫–µ
    try:
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
        logger.debug("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö —Ä–∞—Å—Å—ã–ª–∫–∏")
        await callback.message.edit_text(
            f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n\n"
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {successful}\n"
            f"‚ùå –û—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {failed}\n")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
        logger.debug(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {str(e)}")