import os
from dotenv import load_dotenv
import json
import logging
import sqlite3
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, CallbackContext, MessageHandler, filters as ext_filters

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

API_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
ADMIN_IDS = json.loads(os.getenv('ADMIN_IDS', '[]'))

if not API_TOKEN:
    raise ValueError("–ù–µ –∑–∞–¥–∞–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN.")
if not ADMIN_IDS:
    logging.warning("–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –ø—É—Å—Ç. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è ADMIN_IDS.")

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

waiting_for_broadcast_content = False

def connect_db():
    return sqlite3.connect("users.db")

def create_table():
    conn = connect_db()
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY
        )
    ''')
    conn.commit()
    conn.close()

def add_user(user_id):
    conn = connect_db()
    cursor = conn.cursor()
    cursor.execute('INSERT OR IGNORE INTO users (id) VALUES (?)', (user_id,))
    conn.commit()
    conn.close()

def get_all_users():
    conn = connect_db()
    cursor = conn.cursor()
    cursor.execute('SELECT id FROM users')
    users = cursor.fetchall()
    conn.close()
    return [user[0] for user in users]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: CallbackContext) -> None:
    keyboard = [[InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫", callback_data='get_guide')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    user_id = update.message.chat_id
    add_user(user_id)  
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç!\n–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É ü§ç\n\n–õ—é–±–æ–π –∏–∑ –ø–æ–¥–∞—Ä–∫–æ–≤ –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–±—Ä–∞—Ç—å –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ –ë–ï–°–ü–õ–ê–¢–ù–û üëá",
        reply_markup=reply_markup
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–ª—É—á–∏—Ç—å –≥–∞–π–¥"
async def handle_guide_button(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É
    keyboard = [
        [InlineKeyboardButton("12 —Å–∞–º—ã—Ö —Ç–∏–ø–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫ —Ä—É—Å—Å–∫–æ–≥–æ–≤–æ—Ä—è—â–∏—Ö –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º", url="https://discovered-bassoon-2bf.notion.site/12-08637e6a6b0b4e0696e3ca5f2892f553?pvs=4")],
        [InlineKeyboardButton("120+ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ", url="https://drive.google.com/file/d/1PG3L2hmUnyuvoOQ9SC0E5IDfSz6oa_QW/view?usp=sharing")],
        [InlineKeyboardButton("–†–µ—Å—É—Ä—Å—ã –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–∫–∞—á–∫–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ", url="https://discovered-bassoon-2bf.notion.site/cbef9b46bd094bc183a8afbdc937bf4b?pvs=4")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("–ü—Ä–∏–≤–µ—Ç!\n–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É ü§ç\n\n–õ—é–±–æ–π –∏–∑ –ø–æ–¥–∞—Ä–∫–æ–≤ –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–±—Ä–∞—Ç—å –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ –ë–ï–°–ü–õ–ê–¢–ù–û üëá", reply_markup=reply_markup)

# –ö–æ–º–∞–Ω–¥–∞ /broadcast
async def admin_broadcast(update: Update, context: CallbackContext) -> None:
    logger.info("–ö–æ–º–∞–Ω–¥–∞ /broadcast –≤—ã–∑–≤–∞–Ω–∞.")
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    global waiting_for_broadcast_content
    waiting_for_broadcast_content = True
    context.user_data.clear()  # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –Ω–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–æ–π
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏/–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ–¥–∏–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /send_broadcast –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏.")

# –ö–æ–º–∞–Ω–¥–∞ /send_broadcast –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏
async def send_broadcast(update: Update, context: CallbackContext) -> None:
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    await execute_broadcast(context)
    await update.message.reply_text("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    context.user_data.clear()  # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏

async def execute_broadcast(context: CallbackContext) -> None:
    user_ids = get_all_users()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏ –º–µ–¥–∏–∞ –∏–∑ user_data
    messages_to_send = context.user_data.get('messages_to_send', [])

    for user_id in user_ids:
        for message in messages_to_send:
            media = message.get('media', [])
            text = message.get('text', '')

            try:
                # –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞ –∏ —Ç–µ–∫—Å—Ç–∞
                if media:
                    for media_item in media:
                        media_type = media_item.get('type')
                        media_file_id = media_item.get('file_id')
                        if media_type == 'photo':
                            await context.bot.send_photo(chat_id=user_id, photo=media_file_id, caption=text or "")
                        elif media_type == 'video':
                            await context.bot.send_video(chat_id=user_id, video=media_file_id, caption=text or "")
                elif text:
                    await context.bot.send_message(chat_id=user_id, text=text)
                
                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    logger.info("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞
async def handle_broadcast_text(update: Update, context: CallbackContext) -> None:
    global waiting_for_broadcast_content
    user_id = update.effective_user.id

    if user_id not in ADMIN_IDS or not waiting_for_broadcast_content:
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    context.user_data.setdefault('messages_to_send', []).append({'text': update.message.text, 'media': []})
    await update.message.reply_text("–¢–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ–¥–∏–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ, –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /send_broadcast –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–∞
async def handle_broadcast_media(update: Update, context: CallbackContext) -> None:
    global waiting_for_broadcast_content
    user_id = update.effective_user.id

    if user_id not in ADMIN_IDS or not waiting_for_broadcast_content:
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å –º–µ–¥–∏–∞
    caption = update.message.caption
    media_type = None
    media_file_id = None

    if update.message.photo:
        media_file_id = update.message.photo[-1].file_id
        media_type = 'photo'
    elif update.message.video:
        media_file_id = update.message.video.file_id
        media_type = 'video'
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ–¥–∏–∞ –≤ —Å–ø–∏—Å–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    if media_file_id and media_type:
        last_message = context.user_data.setdefault('messages_to_send', []).append({
            'text': caption or '',
            'media': [{'file_id': media_file_id, 'type': media_type}]
        })

    await update.message.reply_text("–ú–µ–¥–∏–∞ –∏ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /send_broadcast –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
application = Application.builder().token(API_TOKEN).build()
application.add_handler(CommandHandler("start", start))
application.add_handler(CallbackQueryHandler(handle_guide_button, pattern='get_guide'))  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫—É
application.add_handler(CommandHandler("broadcast", admin_broadcast))
application.add_handler(CommandHandler("send_broadcast", send_broadcast))
application.add_handler(MessageHandler(ext_filters.TEXT & ext_filters.User(user_id=ADMIN_IDS), handle_broadcast_text))
application.add_handler(MessageHandler(ext_filters.PHOTO | ext_filters.VIDEO & ext_filters.User(user_id=ADMIN_IDS), handle_broadcast_media))

if __name__ == "__main__":
    create_table()
    application.run_polling()